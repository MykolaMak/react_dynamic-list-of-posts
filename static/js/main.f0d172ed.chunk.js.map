{"version":3,"sources":["helpers/api.ts","components/Comment/Comment.tsx","components/CommentsList/CommentsList.tsx","components/User/User.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["getAll","url","fetch","then","response","json","Comment","name","body","email","className","CommentsList","comments","key","map","comment","id","UserItem","Post","title","user","User","PostList","list","post","App","useState","posts","setPosts","isLoading","setIsLoading","errorMessage","setErrorMessage","isLoaded","setIsLoaded","query","setQuery","handleLoadClick","a","usersFromServer","postsFromServer","commentsFromServer","postsWithUsersAndComments","find","userId","filter","postId","visiblePosts","useMemo","queryItem","includes","type","value","onChange","target","length","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0d172ed.chunk.js","sourcesContent":["\nconst getAll = <T>(url: string): Promise<T[]> => {\n  const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/';\n\n  return fetch(`${API_URL}${url}.json`)\n    .then(response => response.json());\n};\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: object;\n  phone: string;\n  website: string;\n  company: object;\n}\n\nexport interface Posts {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n  user?: User;\n  comments?: Comments[];\n}\n\nexport interface Comments {\n  postId: number;\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n  user?: User;\n}\n\nexport const getUsers = () => (getAll<User>('users'));\nexport const getPosts = () => (getAll<Posts>('posts'));\nexport const getComents = () => (getAll<Comments>('comments'));\n","import React from 'react';\nimport './Comment.css';\nimport { Comments } from '../../helpers/api';\n\nconst Comment: React.FC<Comments> = ({ name, body, email }) => (\n  <div className=\"post__comments-list_comment\">\n    <p className=\"post__comments-list_comment-name\">\n      {name}\n    </p>\n    <p className=\"post__comments-list_comment-email\">\n      {email}\n    </p>\n    <p className=\"post__comments-list_comment-body\">\n      {body}\n    </p>\n  </div>\n);\n\nexport default Comment;\n","import React from 'react';\nimport Comment from '../Comment/Comment';\nimport './CommentsList.css';\nimport { Comments } from '../../helpers/api';\n\ninterface CommentsList {\n  comments: Comments[];\n}\n\nconst CommentsList: React.FC<CommentsList> = ({ comments }) => (\n  <div key=\"CommentsList\" className=\"post__comments-list\">\n    <p className=\"post__comments-list_title\">\n      Comments:\n    </p>\n    {comments.map(comment => (\n      <Comment key={comment.id} {...comment} />\n    ))}\n  </div>\n);\n\nexport default CommentsList;\n","import React from 'react';\n\ninterface User {\n  name: string;\n  email: string;\n}\n\nconst UserItem: React.FC<User> = ({ name, email }) => (\n  <div className=\"post__author\">\n    <p className=\"post__author-name\">\n      {name}\n    </p>\n    <p className=\"post__author-email\">\n      {email}\n    </p>\n  </div>\n);\n\nexport default UserItem;\n","import React from 'react';\nimport CommentsList from '../CommentsList/CommentsList';\nimport UserItem from '../User/User';\nimport './Post.css';\nimport { Posts } from '../../helpers/api';\n\nconst Post: React.FC<Posts> = ({\n  title,\n  body,\n  user,\n  comments,\n}) => (\n  <div className=\"post__element\">\n\n    <div className=\"post__item\">\n      <h3 className=\"post__title\">\n        {title}\n      </h3>\n      <p className=\"post__body\">\n        {body}\n      </p>\n    </div>\n\n    {user ? (\n      <UserItem {...user} />\n    ) : (\n      ''\n    )}\n\n    {comments ? (\n      <CommentsList comments={comments} />\n    ) : (\n      ''\n    )}\n\n  </div>\n);\n\nexport default Post;\n","import React from 'react';\nimport Post from '../Post/Post';\nimport './PostList.css';\nimport { Posts } from '../../helpers/api';\n\ninterface List {\n  list: Posts[];\n}\n\nconst PostList: React.FC<List> = ({ list }) => (\n  <div key=\"PostList\" className=\"post list\">\n    {list.map(post => (\n      <Post key={post.id} {...post} />\n    ))}\n  </div>\n);\n\nexport default PostList;\n","import React, { useState, useMemo } from 'react';\nimport './App.css';\nimport {\n  getUsers,\n  getPosts,\n  getComents,\n  Posts,\n} from './helpers/api';\nimport PostList from './components/PostList/PostList';\n\nconst App = () => {\n  const [posts, setPosts] = useState<Posts[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const handleLoadClick = async () => {\n    setIsLoading(true);\n\n    try {\n      const usersFromServer = await getUsers();\n      const postsFromServer = await getPosts();\n      const commentsFromServer = await getComents();\n\n      const postsWithUsersAndComments = postsFromServer.map(post => ({\n        ...post,\n        user: usersFromServer.find(user => user.id === post.userId),\n        comments: commentsFromServer.filter(comment => comment.postId === post.id),\n      }));\n\n      setPosts(postsWithUsersAndComments);\n      setIsLoaded(true);\n    } catch (error) {\n      setErrorMessage('Loading error, please try again later.');\n    }\n  };\n\n  const visiblePosts = useMemo(() => {\n    const postsFromFilter = (postsItem: Posts[], queryItem: string) => {\n      return postsItem\n        .filter(post => post.title.includes(queryItem) || post.body.includes(queryItem));\n    };\n\n    return postsFromFilter(posts, query);\n  }, [posts, query]);\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      {!isLoaded ? (\n        <>\n          <button\n            type=\"button\"\n            onClick={handleLoadClick}\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n          <p className=\"error\">{errorMessage}</p>\n        </>\n      ) : (\n        <>\n          <div className=\"search\">\n            <input\n              type=\"text\"\n              value={query}\n              onChange={({ target: { value } }) => setQuery(value)}\n            />\n          </div>\n          {visiblePosts.length > 0 ? (\n            <PostList list={visiblePosts} />\n          ) : (\n            <h2>Not found.</h2>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}